;(function($, undefined) {
	var _login_ = $('#login'),                      //登录区域
		_kurento_room_ = $('#kurento_room'),        //内容区域
		_login_clear_ = $('#clear'),                //登录页面清除按钮
		_login_joinBtn_ = $('#joinBtn'),            //登录按钮
		_login_username = $('#name'),               //用户名的输入框
		_login_roomname = $('#roomName')            //房间名输入框
		; 
	var _serverUrl = 'https://www.kurento.me/rs/';
	var _scope = {};
	var _ServiceRoom = new ServiceRoom();
	function __init(){
		//显示登录房间，房间模块隐藏
		_login_.show();
		_kurento_room_.hide();
		
		_initialization();
		_addEvents();
	}
	function _initialization(){
		//首先加载服务器的信息房间列表等数据
		$.get(_serverUrl+'getAllRooms').
		    success(function (data, status, headers, config) {
		        _scope.listRooms = data;
		    }).
		    error(function (data, status, headers, config) {});
		$.get(_serverUrl+'getClientConfig').
		     success(function (data, status, headers, config) {
		    	_scope.clientConfig = data;
		     }).
		     error(function (data, status, headers, config) {});
		$.get(_serverUrl+'getUpdateSpeakerInterval').
			success(function (data, status, headers, config) {
				_scope.updateSpeakerInterval = data
			}).
			error(function (data, status, headers, config) {});
		$.get(_serverUrl+'getThresholdSpeaker').
			success(function (data, status, headers, config) {
				_scope.thresholdSpeaker = data
			}).
			error(function (data, status, headers, config) {});
	}
	function _addEvents(){
		_login_clear_.on('click',function(){
			//登录页面清除按钮
			_login_username.val('');
			_login_roomname.val('');
			_scope.room = "";
			_scope.userName = "";
			_scope.roomName = "";
		});
		_login_joinBtn_.on('click',function(){
			//登录页面加入房间按钮
			createRoom();
		});
	}
	//创建
	function createRoom(){
		
		
	    var _userName = 'xiaoma';
	    var _roomName = 'fangjia-yihao';
	    var wsUri = 'wss://123.56.95.235:8443/room';
	
	    //show loopback stream from server
	    var displayPublished = false;
	    //also show local stream when display my remote
	    var mirrorLocal = false;
	    
	    var kurento = KurentoRoom(wsUri, function (error, kurento) {
	
	        if (error)
	            return console.log(error);
	
	        //TODO token should be generated by the server or a 3rd-party component  
	        //kurento.setRpcParams({token : "securityToken"});
	
	        room = kurento.Room({
	            room: _roomName,
	            user: _userName,
	            updateSpeakerInterval: 1800,
	            thresholdSpeaker: -50 
	        });
	
	        var localStream = kurento.Stream(room, {
	            audio: true,
	            video: true,
	            data: false
	        });
	
	        localStream.addEventListener("access-accepted", function () {
	            room.addEventListener("room-connected", function (roomEvent) {
	            	var streams = roomEvent.streams;
	            	if (displayPublished ) {
	            		localStream.subscribeToMyRemote();
	            	}
	            	localStream.publish();
	                ServiceRoom.setLocalStream(localStream.getWebRtcPeer());
	                for (var i = 0; i < streams.length; i++) {
	                    ServiceParticipant.addParticipant(streams[i]);
	                }
	            });
	
	            room.addEventListener("stream-published", function (streamEvent) {
	            	 ServiceParticipant.addLocalParticipant(localStream);
	            	 if (mirrorLocal && localStream.displayMyRemote()) {
	            		 var localVideo = kurento.Stream(room, {
	                         video: true,
	                         id: "localStream"
	                     });
	            		 localVideo.mirrorLocalStream(localStream.getWrStream());
	            		 ServiceParticipant.addLocalMirror(localVideo);
	            	 }
	            });
	            
	            room.addEventListener("stream-added", function (streamEvent) {
	                ServiceParticipant.addParticipant(streamEvent.stream);
	            });
	
	            room.addEventListener("stream-removed", function (streamEvent) {
	                ServiceParticipant.removeParticipantByStream(streamEvent.stream);
	            });
	
	            room.addEventListener("newMessage", function (msg) {
	                ServiceParticipant.showMessage(msg.room, msg.user, msg.message);
	            });
	
	            room.addEventListener("error-room", function (error) {
	                ServiceParticipant.showError($window, LxNotificationService, error);
	            });
	
	            room.addEventListener("error-media", function (msg) {
	                ServiceParticipant.alertMediaError($window, LxNotificationService, msg.error, function (answer) {
	                	console.warn("Leave room because of error: " + answer);
	                	if (answer) {
	                		kurento.close(true);
	                	}
	                });
	            });
	            
	            room.addEventListener("room-closed", function (msg) {
	            	if (msg.room !== _roomName) {
	            		console.error("Closed room name doesn't match this room's name", 
	            				msg.room, _roomName);
	            	} else {
	            		kurento.close(true);
	            		ServiceParticipant.forceClose($window, LxNotificationService, 'Room '
	            			+ msg.room + ' has been forcibly closed from server');
	            	}
	            });
	            
	            room.addEventListener("lost-connection", function(msg) {
	                kurento.close(true);
	                ServiceParticipant.forceClose($window, LxNotificationService,
	                  'Lost connection with room "' + msg.room +
	                  '". Please try reloading the webpage...');
	              });
	            
	            room.addEventListener("stream-stopped-speaking", function (participantId) {
	                ServiceParticipant.streamStoppedSpeaking(participantId);
	             });
	
	             room.addEventListener("stream-speaking", function (participantId) {
	                ServiceParticipant.streamSpeaking(participantId);
	             });
	
	             room.addEventListener("update-main-speaker", function (participantId) {
	                 ServiceParticipant.updateMainSpeaker(participantId);
	              });
	
	            room.connect();
	        });
	
	        localStream.addEventListener("access-denied", function () {
	        	ServiceParticipant.showError($window, LxNotificationService, {
	        		error : {
	        			message : "Access not granted to camera and microphone"
	        				}
	        	});
	        });
	        localStream.init();
	    });
	
	    //save kurento & roomName & userName in service
	    _ServiceRoom.setKurento(kurento);
	    _ServiceRoom.setRoomName(_roomName);
	    _ServiceRoom.setUserName(_userName);
	
	    //redirect to call
	    $window.location.href = '/dsdsdsdsdwewe';
		
		
		
		
	}

	__init();//执行初始化方法
})(window.jQuery);
        